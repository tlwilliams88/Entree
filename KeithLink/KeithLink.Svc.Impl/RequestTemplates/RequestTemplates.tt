<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #> 
<#@ assembly name="CommerceServer.Foundation.CrossTier" #>
<#@ assembly name="$(ProjectDir)$(OutDir)CommerceServerContrib.CodeGeneration.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="CommerceServerContrib.CodeGeneration" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//	CommerceServerContrib.CodeGeneration
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#= CallContext.LogicalGetData("NamespaceHint") #>
{
	using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using CommerceServer.Foundation;
    using CommerceServer.Foundation.RequestTemplates;
    using CommerceServerContrib.CrossTier.Interfaces.Controllers;
    using CommerceServerContrib.Web.Controllers;

<#
string channel ="";
string userLocal="en-US";
string userUILocale = "en-US";

// Swapping the current directory so 2-tier Commerce Server will work.
Environment.CurrentDirectory = Path.GetDirectoryName(BuildConfigFilePath());
AppDomain.CurrentDomain.SetData("APPBASE", Path.GetDirectoryName(BuildConfigFilePath()));

var requestTemplateGenerator = new RequestTemplateGenerator(BuildConfigFilePath(), channel, userLocal, userUILocale);
	
foreach(var item in requestTemplateGenerator.GetRequestTemplates())
{
#>
	/// <summary>
    /// Generated helper class for using <#= item.GroupName #> Request Templates.
    /// </summary>
	[GeneratedCode("CommerceServerContrib.CodeGeneration", "1.0.0.0")] 
	public static class <#= item.GroupName #>
	{
<#
	PushIndent("\t\t");
	foreach(var individualTemplate in item.RequestTemplates)
	{
		var template = new CodeGenerationRequestTemplate(individualTemplate);
		CallContext.LogicalSetData("requestTemplate", template);
		string output = ProcessTemplate("RequestTemplateTemplate.tt");
		Write(output);
		CallContext.FreeNamedDataSlot("requestTemplate");
	}
	PopIndent();
#>

	}

<#
}
#>
}
<#@ include file="..\TemplateGenerationCommon\CodeGenerationIncludes.tt" #>