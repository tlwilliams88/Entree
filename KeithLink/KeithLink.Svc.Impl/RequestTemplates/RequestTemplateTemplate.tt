<#@ template debug="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="CommerceServer.Foundation.CrossTier" #>
<#@ assembly name="$(ProjectDir)$(OutDir)CommerceServerContrib.CodeGeneration.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="CommerceServerContrib.CodeGeneration" #>
<#@ import namespace="CommerceServer.Foundation" #>

<#@ parameter type="CommerceServerContrib.CodeGeneration.CodeGenerationRequestTemplate" name="requestTemplate"  #>
<#
/*
(c) 2012 CommerceServer.net, Inc. and its affiliates. All rights reserved.
*/
	var arguments = requestTemplate.RequestTemplate.GetPropertyValue("ArgumentSummary") as List<RequestTemplatePropertyDefinition>;
	var parameters = new StringBuilder();
	var comments = new StringBuilder();
	var commentsTemplate = "/// <param name=\"{0}\">{1}</param>";

	if(arguments !=null) 
	{
		foreach(var argument in arguments)
		{
			if(parameters.Length > 0){
					parameters.Append(", ");
					comments.AppendLine();
					//comments.Append("\t\t");
				}
			parameters.Append(argument.RuntimeType + " " + argument.Name);
			comments.Append(string.Format(commentsTemplate, argument.Name, "The " + argument.ArgumentType.ToString().ToLower() + " argument for " + argument.WeaklyTypedName));
		}
	}#>
/// <summary>
/// <#=requestTemplate.RequestTemplate.GetDescription() #>
/// </summary>
<# if(!string.IsNullOrEmpty(comments.ToString())) { #>
<#=comments.ToString()#>
<#}#>
/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> <#=  requestTemplate.RequestTemplate.Id #>(<#= parameters.ToString() #>)
{
<# if(arguments != null) { #>
	var parameters = new RequestTemplateParameterCollection();

<#foreach(RequestTemplatePropertyDefinition argument in arguments){#>
	parameters.Add(new RequestTemplateParameter("<#=argument.WeaklyTypedName#>", <#=argument.Name#>, RequestTemplateParameterType.<#=argument.ArgumentType.ToString()#>));
<#}#>
	var controller = ControllerFactory.GetController("<#= requestTemplate.RequestTemplate.GroupName #>");
	var serviceAdapterResponse = controller.ProcessRequest("<#= requestTemplate.RequestTemplate.Id #>", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;
<# } #>
}

/// <summary>
/// <#=requestTemplate.RequestTemplate.GetDescription() #>
/// </summary>
<# if(!string.IsNullOrEmpty(comments.ToString())) { #>
<#=comments.ToString()#>
<#}#>
/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> <#=  requestTemplate.RequestTemplate.Id #>Queued(<#= parameters.ToString() #>)
{
<# if(arguments != null) { #>
	var parameters = new RequestTemplateParameterCollection();

<#foreach(RequestTemplatePropertyDefinition argument in arguments){#>
	parameters.Add(new RequestTemplateParameter("<#=argument.WeaklyTypedName#>", <#=argument.Name#>, RequestTemplateParameterType.<#=argument.ArgumentType.ToString()#>));
<#}#>
	var controller = ControllerFactory.GetController("<#= requestTemplate.RequestTemplate.GroupName #>");
	controller.QueueRequest("<#= requestTemplate.RequestTemplate.Id #>", parameters, "POCO");
	return controller;
<# } #>
}