

 










 



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//	CommerceServerContrib.CodeGeneration
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace KeithLink.Svc.Impl.RequestTemplates
{
	using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using CommerceServer.Foundation;
    using CommerceServer.Foundation.RequestTemplates;
    using CommerceServerContrib.CrossTier.Interfaces.Controllers;
    using CommerceServerContrib.Web.Controllers;


	/// <summary>
    /// Generated helper class for using Catalog Request Templates.
    /// </summary>
	[GeneratedCode("CommerceServerContrib.CodeGeneration", "1.0.0.0")] 
	public static class Catalog
	{













/// <summary>
/// Get Product Quick Summary
/// </summary>

/// <param name="productId">The search argument for ProductId</param>
		/// <param name="catalogId">The search argument for CatalogId</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetProductSummary(string productId, string catalogId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("CatalogId", catalogId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Catalog");
	var serviceAdapterResponse = controller.ProcessRequest("GetProductSummary", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get Product Quick Summary
/// </summary>

/// <param name="productId">The search argument for ProductId</param>
		/// <param name="catalogId">The search argument for CatalogId</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetProductSummaryQueued(string productId, string catalogId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("CatalogId", catalogId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Catalog");
	controller.QueueRequest("GetProductSummary", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get Category With Child Products
/// </summary>

/// <param name="categoryId">The search argument for CategoryId</param>
		/// <param name="catalogId">The search argument for CatalogId</param>
		/// <param name="firstItemIndex">The search argument for FirstItemIndex</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>
		/// <param name="rank">The search argument for Rank</param>
		/// <param name="displayName">The search argument for DisplayName</param>
		/// <param name="sortrank">The sort argument for Rank</param>
		/// <param name="sortdisplayName">The sort argument for DisplayName</param>
		/// <param name="currentPrice">The sort argument for CurrentPrice</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetCategoryWithChildProducts(string categoryId, string catalogId, string firstItemIndex, string numberOfItemsToReturn, string returnTotalItemCount, string rank, string displayName, string sortrank, string sortdisplayName, string currentPrice)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("CategoryId", categoryId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("CatalogId", catalogId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("FirstItemIndex", firstItemIndex, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("Rank", rank, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("DisplayName", displayName, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("Rank", sortrank, RequestTemplateParameterType.Sort));

	parameters.Add(new RequestTemplateParameter("DisplayName", sortdisplayName, RequestTemplateParameterType.Sort));

	parameters.Add(new RequestTemplateParameter("CurrentPrice", currentPrice, RequestTemplateParameterType.Sort));

	var controller = ControllerFactory.GetController("Catalog");
	var serviceAdapterResponse = controller.ProcessRequest("GetCategoryWithChildProducts", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get Category With Child Products
/// </summary>

/// <param name="categoryId">The search argument for CategoryId</param>
		/// <param name="catalogId">The search argument for CatalogId</param>
		/// <param name="firstItemIndex">The search argument for FirstItemIndex</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>
		/// <param name="rank">The search argument for Rank</param>
		/// <param name="displayName">The search argument for DisplayName</param>
		/// <param name="sortrank">The sort argument for Rank</param>
		/// <param name="sortdisplayName">The sort argument for DisplayName</param>
		/// <param name="currentPrice">The sort argument for CurrentPrice</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetCategoryWithChildProductsQueued(string categoryId, string catalogId, string firstItemIndex, string numberOfItemsToReturn, string returnTotalItemCount, string rank, string displayName, string sortrank, string sortdisplayName, string currentPrice)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("CategoryId", categoryId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("CatalogId", catalogId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("FirstItemIndex", firstItemIndex, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("Rank", rank, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("DisplayName", displayName, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("Rank", sortrank, RequestTemplateParameterType.Sort));

	parameters.Add(new RequestTemplateParameter("DisplayName", sortdisplayName, RequestTemplateParameterType.Sort));

	parameters.Add(new RequestTemplateParameter("CurrentPrice", currentPrice, RequestTemplateParameterType.Sort));

	var controller = ControllerFactory.GetController("Catalog");
	controller.QueueRequest("GetCategoryWithChildProducts", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get Top Level Categories
/// </summary>

/// <param name="catalogId">The search argument for CatalogId</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>
		/// <param name="displayName">The sort argument for DisplayName</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetTopLevelCategories(string catalogId, string numberOfItemsToReturn, string returnTotalItemCount, string displayName)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("CatalogId", catalogId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("DisplayName", displayName, RequestTemplateParameterType.Sort));

	var controller = ControllerFactory.GetController("Catalog");
	var serviceAdapterResponse = controller.ProcessRequest("GetTopLevelCategories", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get Top Level Categories
/// </summary>

/// <param name="catalogId">The search argument for CatalogId</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>
		/// <param name="displayName">The sort argument for DisplayName</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetTopLevelCategoriesQueued(string catalogId, string numberOfItemsToReturn, string returnTotalItemCount, string displayName)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("CatalogId", catalogId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("DisplayName", displayName, RequestTemplateParameterType.Sort));

	var controller = ControllerFactory.GetController("Catalog");
	controller.QueueRequest("GetTopLevelCategories", parameters, "POCO");
	return controller;

}

	}


	/// <summary>
    /// Generated helper class for using Profile Request Templates.
    /// </summary>
	[GeneratedCode("CommerceServerContrib.CodeGeneration", "1.0.0.0")] 
	public static class Profile
	{













/// <summary>
/// Get States And Provinces
/// </summary>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetRegions()
{

	var parameters = new RequestTemplateParameterCollection();


	var controller = ControllerFactory.GetController("Profile");
	var serviceAdapterResponse = controller.ProcessRequest("GetRegions", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get States And Provinces
/// </summary>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetRegionsQueued()
{

	var parameters = new RequestTemplateParameterCollection();


	var controller = ControllerFactory.GetController("Profile");
	controller.QueueRequest("GetRegions", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get States And Provinces
/// </summary>

/// <param name="id">The search argument for Id</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetRegionWithState(string id)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Id", id, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Profile");
	var serviceAdapterResponse = controller.ProcessRequest("GetRegionWithState", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get States And Provinces
/// </summary>

/// <param name="id">The search argument for Id</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetRegionWithStateQueued(string id)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Id", id, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Profile");
	controller.QueueRequest("GetRegionWithState", parameters, "POCO");
	return controller;

}












/// <summary>
/// Request Template to get all of the payment methods.
/// </summary>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetPaymentMethods()
{

	var parameters = new RequestTemplateParameterCollection();


	var controller = ControllerFactory.GetController("Profile");
	var serviceAdapterResponse = controller.ProcessRequest("GetPaymentMethods", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Request Template to get all of the payment methods.
/// </summary>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetPaymentMethodsQueued()
{

	var parameters = new RequestTemplateParameterCollection();


	var controller = ControllerFactory.GetController("Profile");
	controller.QueueRequest("GetPaymentMethods", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get all shipping methods
/// </summary>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetShippingMethods()
{

	var parameters = new RequestTemplateParameterCollection();


	var controller = ControllerFactory.GetController("Profile");
	var serviceAdapterResponse = controller.ProcessRequest("GetShippingMethods", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get all shipping methods
/// </summary>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetShippingMethodsQueued()
{

	var parameters = new RequestTemplateParameterCollection();


	var controller = ControllerFactory.GetController("Profile");
	controller.QueueRequest("GetShippingMethods", parameters, "POCO");
	return controller;

}

	}


	/// <summary>
    /// Generated helper class for using Orders Request Templates.
    /// </summary>
	[GeneratedCode("CommerceServerContrib.CodeGeneration", "1.0.0.0")] 
	public static class Orders
	{













/// <summary>
/// Cleans addresses and payments when a user re-enters the checkout flow
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> CleanBasket(string name, string userId, string basketType)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("CleanBasket", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Cleans addresses and payments when a user re-enters the checkout flow
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> CleanBasketQueued(string name, string userId, string basketType)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("CleanBasket", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get User Basket
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetBasket(string name, string userId, string basketType, string refreshBasket, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("GetBasket", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get User Basket
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetBasketQueued(string name, string userId, string basketType, string refreshBasket, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("GetBasket", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get User Basket without additional data.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetBasketWithoutAdditionalData(string name, string userId, string basketType, string refreshBasket)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("GetBasketWithoutAdditionalData", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get User Basket without additional data.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetBasketWithoutAdditionalDataQueued(string name, string userId, string basketType, string refreshBasket)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("GetBasketWithoutAdditionalData", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get User Basket with line item paging
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="firstItemIndex">The search argument for FirstItemIndex</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetBasketPagedLineItems(string name, string userId, string basketType, string refreshBasket, string firstItemIndex, string numberOfItemsToReturn, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("FirstItemIndex", firstItemIndex, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("GetBasketPagedLineItems", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get User Basket with line item paging
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="firstItemIndex">The search argument for FirstItemIndex</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetBasketPagedLineItemsQueued(string name, string userId, string basketType, string refreshBasket, string firstItemIndex, string numberOfItemsToReturn, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("FirstItemIndex", firstItemIndex, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("GetBasketPagedLineItems", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get User Basket with sibling operations for Payment and Shipping methods
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetBasketPaymentAndShippingMethods(string name, string userId, string basketType, string refreshBasket)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("GetBasketPaymentAndShippingMethods", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get User Basket with sibling operations for Payment and Shipping methods
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetBasketPaymentAndShippingMethodsQueued(string name, string userId, string basketType, string refreshBasket)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("GetBasketPaymentAndShippingMethods", parameters, "POCO");
	return controller;

}












/// <summary>
/// Adds a product to cart.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>
		/// <param name="notes">The propertiestoset argument for Notes</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> AddToCart(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity, string notes)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Notes", notes, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("AddToCart", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Adds a product to cart.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>
		/// <param name="notes">The propertiestoset argument for Notes</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> AddToCartQueued(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity, string notes)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Notes", notes, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("AddToCart", parameters, "POCO");
	return controller;

}












/// <summary>
/// Updates a basket
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="propertiesToSetbasketType">The propertiestoset argument for BasketType</param>
		/// <param name="status">The propertiestoset argument for Status</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="shippingAddressId">The propertiestoset argument for ShippingAddressId</param>
		/// <param name="shippingAddressName">The propertiestoset argument for ShippingAddressName</param>
		/// <param name="shippingFirstName">The propertiestoset argument for ShippingFirstName</param>
		/// <param name="shippingLastName">The propertiestoset argument for ShippingLastName</param>
		/// <param name="shippingLine1">The propertiestoset argument for ShippingLine1</param>
		/// <param name="shippingLine2">The propertiestoset argument for ShippingLine2</param>
		/// <param name="shippingCity">The propertiestoset argument for ShippingCity</param>
		/// <param name="shippingStateProvinceCode">The propertiestoset argument for ShippingStateProvinceCode</param>
		/// <param name="shippingStateProvinceName">The propertiestoset argument for ShippingStateProvinceName</param>
		/// <param name="shippingZipPostalCode">The propertiestoset argument for ShippingZipPostalCode</param>
		/// <param name="shippingCountryRegionCode">The propertiestoset argument for ShippingCountryRegionCode</param>
		/// <param name="shippingCountryRegionName">The propertiestoset argument for ShippingCountryRegionName</param>
		/// <param name="shippingTelephone">The propertiestoset argument for ShippingTelephone</param>
		/// <param name="billingAddressId">The propertiestoset argument for BillingAddressId</param>
		/// <param name="billingAddressName">The propertiestoset argument for BillingAddressName</param>
		/// <param name="billingFirstName">The propertiestoset argument for BillingFirstName</param>
		/// <param name="billingLastName">The propertiestoset argument for BillingLastName</param>
		/// <param name="billingLine1">The propertiestoset argument for BillingLine1</param>
		/// <param name="billingLine2">The propertiestoset argument for BillingLine2</param>
		/// <param name="billingCity">The propertiestoset argument for BillingCity</param>
		/// <param name="billingStateProvinceCode">The propertiestoset argument for BillingStateProvinceCode</param>
		/// <param name="billingStateProvinceName">The propertiestoset argument for BillingStateProvinceName</param>
		/// <param name="billingZipPostalCode">The propertiestoset argument for BillingZipPostalCode</param>
		/// <param name="billingCountryRegionCode">The propertiestoset argument for BillingCountryRegionCode</param>
		/// <param name="billingCountryRegionName">The propertiestoset argument for BillingCountryRegionName</param>
		/// <param name="billingTelephone">The propertiestoset argument for BillingTelephone</param>
		/// <param name="shippingMethodId">The propertiestoset argument for ShippingMethodId</param>
		/// <param name="expirationMonth">The propertiestoset argument for ExpirationMonth</param>
		/// <param name="expirationYear">The propertiestoset argument for ExpirationYear</param>
		/// <param name="customerName">The propertiestoset argument for CustomerName</param>
		/// <param name="creditCardNumber">The propertiestoset argument for CreditCardNumber</param>
		/// <param name="validationCode">The propertiestoset argument for ValidationCode</param>
		/// <param name="creditCardBillingAddressId">The propertiestoset argument for CreditCardBillingAddressId</param>
		/// <param name="paymentMethodId">The search argument for PaymentMethodId</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> UpdateBasket(string name, string userId, string basketType, string propertiesToSetbasketType, string status, string refreshBasket, string shippingAddressId, string shippingAddressName, string shippingFirstName, string shippingLastName, string shippingLine1, string shippingLine2, string shippingCity, string shippingStateProvinceCode, string shippingStateProvinceName, string shippingZipPostalCode, string shippingCountryRegionCode, string shippingCountryRegionName, string shippingTelephone, string billingAddressId, string billingAddressName, string billingFirstName, string billingLastName, string billingLine1, string billingLine2, string billingCity, string billingStateProvinceCode, string billingStateProvinceName, string billingZipPostalCode, string billingCountryRegionCode, string billingCountryRegionName, string billingTelephone, string shippingMethodId, string expirationMonth, string expirationYear, string customerName, string creditCardNumber, string validationCode, string creditCardBillingAddressId, string paymentMethodId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", propertiesToSetbasketType, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Status", status, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ShippingAddressId", shippingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingAddressName", shippingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingFirstName", shippingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLastName", shippingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine1", shippingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine2", shippingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCity", shippingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceCode", shippingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceName", shippingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingZipPostalCode", shippingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionCode", shippingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionName", shippingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingTelephone", shippingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressId", billingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressName", billingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingFirstName", billingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLastName", billingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine1", billingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine2", billingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCity", billingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceCode", billingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceName", billingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingZipPostalCode", billingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionCode", billingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionName", billingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingTelephone", billingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingMethodId", shippingMethodId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationMonth", expirationMonth, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationYear", expirationYear, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CustomerName", customerName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardNumber", creditCardNumber, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ValidationCode", validationCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardBillingAddressId", creditCardBillingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("PaymentMethodId", paymentMethodId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("UpdateBasket", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Updates a basket
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="propertiesToSetbasketType">The propertiestoset argument for BasketType</param>
		/// <param name="status">The propertiestoset argument for Status</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="shippingAddressId">The propertiestoset argument for ShippingAddressId</param>
		/// <param name="shippingAddressName">The propertiestoset argument for ShippingAddressName</param>
		/// <param name="shippingFirstName">The propertiestoset argument for ShippingFirstName</param>
		/// <param name="shippingLastName">The propertiestoset argument for ShippingLastName</param>
		/// <param name="shippingLine1">The propertiestoset argument for ShippingLine1</param>
		/// <param name="shippingLine2">The propertiestoset argument for ShippingLine2</param>
		/// <param name="shippingCity">The propertiestoset argument for ShippingCity</param>
		/// <param name="shippingStateProvinceCode">The propertiestoset argument for ShippingStateProvinceCode</param>
		/// <param name="shippingStateProvinceName">The propertiestoset argument for ShippingStateProvinceName</param>
		/// <param name="shippingZipPostalCode">The propertiestoset argument for ShippingZipPostalCode</param>
		/// <param name="shippingCountryRegionCode">The propertiestoset argument for ShippingCountryRegionCode</param>
		/// <param name="shippingCountryRegionName">The propertiestoset argument for ShippingCountryRegionName</param>
		/// <param name="shippingTelephone">The propertiestoset argument for ShippingTelephone</param>
		/// <param name="billingAddressId">The propertiestoset argument for BillingAddressId</param>
		/// <param name="billingAddressName">The propertiestoset argument for BillingAddressName</param>
		/// <param name="billingFirstName">The propertiestoset argument for BillingFirstName</param>
		/// <param name="billingLastName">The propertiestoset argument for BillingLastName</param>
		/// <param name="billingLine1">The propertiestoset argument for BillingLine1</param>
		/// <param name="billingLine2">The propertiestoset argument for BillingLine2</param>
		/// <param name="billingCity">The propertiestoset argument for BillingCity</param>
		/// <param name="billingStateProvinceCode">The propertiestoset argument for BillingStateProvinceCode</param>
		/// <param name="billingStateProvinceName">The propertiestoset argument for BillingStateProvinceName</param>
		/// <param name="billingZipPostalCode">The propertiestoset argument for BillingZipPostalCode</param>
		/// <param name="billingCountryRegionCode">The propertiestoset argument for BillingCountryRegionCode</param>
		/// <param name="billingCountryRegionName">The propertiestoset argument for BillingCountryRegionName</param>
		/// <param name="billingTelephone">The propertiestoset argument for BillingTelephone</param>
		/// <param name="shippingMethodId">The propertiestoset argument for ShippingMethodId</param>
		/// <param name="expirationMonth">The propertiestoset argument for ExpirationMonth</param>
		/// <param name="expirationYear">The propertiestoset argument for ExpirationYear</param>
		/// <param name="customerName">The propertiestoset argument for CustomerName</param>
		/// <param name="creditCardNumber">The propertiestoset argument for CreditCardNumber</param>
		/// <param name="validationCode">The propertiestoset argument for ValidationCode</param>
		/// <param name="creditCardBillingAddressId">The propertiestoset argument for CreditCardBillingAddressId</param>
		/// <param name="paymentMethodId">The search argument for PaymentMethodId</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> UpdateBasketQueued(string name, string userId, string basketType, string propertiesToSetbasketType, string status, string refreshBasket, string shippingAddressId, string shippingAddressName, string shippingFirstName, string shippingLastName, string shippingLine1, string shippingLine2, string shippingCity, string shippingStateProvinceCode, string shippingStateProvinceName, string shippingZipPostalCode, string shippingCountryRegionCode, string shippingCountryRegionName, string shippingTelephone, string billingAddressId, string billingAddressName, string billingFirstName, string billingLastName, string billingLine1, string billingLine2, string billingCity, string billingStateProvinceCode, string billingStateProvinceName, string billingZipPostalCode, string billingCountryRegionCode, string billingCountryRegionName, string billingTelephone, string shippingMethodId, string expirationMonth, string expirationYear, string customerName, string creditCardNumber, string validationCode, string creditCardBillingAddressId, string paymentMethodId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", propertiesToSetbasketType, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Status", status, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ShippingAddressId", shippingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingAddressName", shippingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingFirstName", shippingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLastName", shippingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine1", shippingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine2", shippingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCity", shippingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceCode", shippingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceName", shippingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingZipPostalCode", shippingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionCode", shippingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionName", shippingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingTelephone", shippingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressId", billingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressName", billingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingFirstName", billingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLastName", billingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine1", billingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine2", billingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCity", billingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceCode", billingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceName", billingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingZipPostalCode", billingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionCode", billingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionName", billingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingTelephone", billingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingMethodId", shippingMethodId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationMonth", expirationMonth, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationYear", expirationYear, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CustomerName", customerName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardNumber", creditCardNumber, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ValidationCode", validationCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardBillingAddressId", creditCardBillingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("PaymentMethodId", paymentMethodId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("UpdateBasket", parameters, "POCO");
	return controller;

}












/// <summary>
/// Updates a basket and returns the payment methods and shipping methods.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="propertiesToSetbasketType">The propertiestoset argument for BasketType</param>
		/// <param name="status">The propertiestoset argument for Status</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="shippingAddressId">The propertiestoset argument for ShippingAddressId</param>
		/// <param name="shippingAddressName">The propertiestoset argument for ShippingAddressName</param>
		/// <param name="shippingFirstName">The propertiestoset argument for ShippingFirstName</param>
		/// <param name="shippingLastName">The propertiestoset argument for ShippingLastName</param>
		/// <param name="shippingLine1">The propertiestoset argument for ShippingLine1</param>
		/// <param name="shippingLine2">The propertiestoset argument for ShippingLine2</param>
		/// <param name="shippingCity">The propertiestoset argument for ShippingCity</param>
		/// <param name="shippingStateProvinceCode">The propertiestoset argument for ShippingStateProvinceCode</param>
		/// <param name="shippingStateProvinceName">The propertiestoset argument for ShippingStateProvinceName</param>
		/// <param name="shippingZipPostalCode">The propertiestoset argument for ShippingZipPostalCode</param>
		/// <param name="shippingCountryRegionCode">The propertiestoset argument for ShippingCountryRegionCode</param>
		/// <param name="shippingCountryRegionName">The propertiestoset argument for ShippingCountryRegionName</param>
		/// <param name="shippingTelephone">The propertiestoset argument for ShippingTelephone</param>
		/// <param name="billingAddressId">The propertiestoset argument for BillingAddressId</param>
		/// <param name="billingAddressName">The propertiestoset argument for BillingAddressName</param>
		/// <param name="billingFirstName">The propertiestoset argument for BillingFirstName</param>
		/// <param name="billingLastName">The propertiestoset argument for BillingLastName</param>
		/// <param name="billingLine1">The propertiestoset argument for BillingLine1</param>
		/// <param name="billingLine2">The propertiestoset argument for BillingLine2</param>
		/// <param name="billingCity">The propertiestoset argument for BillingCity</param>
		/// <param name="billingStateProvinceCode">The propertiestoset argument for BillingStateProvinceCode</param>
		/// <param name="billingStateProvinceName">The propertiestoset argument for BillingStateProvinceName</param>
		/// <param name="billingZipPostalCode">The propertiestoset argument for BillingZipPostalCode</param>
		/// <param name="billingCountryRegionCode">The propertiestoset argument for BillingCountryRegionCode</param>
		/// <param name="billingCountryRegionName">The propertiestoset argument for BillingCountryRegionName</param>
		/// <param name="billingTelephone">The propertiestoset argument for BillingTelephone</param>
		/// <param name="shippingMethodId">The propertiestoset argument for ShippingMethodId</param>
		/// <param name="expirationMonth">The propertiestoset argument for ExpirationMonth</param>
		/// <param name="expirationYear">The propertiestoset argument for ExpirationYear</param>
		/// <param name="customerName">The propertiestoset argument for CustomerName</param>
		/// <param name="creditCardNumber">The propertiestoset argument for CreditCardNumber</param>
		/// <param name="validationCode">The propertiestoset argument for ValidationCode</param>
		/// <param name="creditCardBillingAddressId">The propertiestoset argument for CreditCardBillingAddressId</param>
		/// <param name="paymentMethodId">The search argument for PaymentMethodId</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> UpdateBasketWithPaymentAndShippingMethods(string name, string userId, string basketType, string propertiesToSetbasketType, string status, string refreshBasket, string shippingAddressId, string shippingAddressName, string shippingFirstName, string shippingLastName, string shippingLine1, string shippingLine2, string shippingCity, string shippingStateProvinceCode, string shippingStateProvinceName, string shippingZipPostalCode, string shippingCountryRegionCode, string shippingCountryRegionName, string shippingTelephone, string billingAddressId, string billingAddressName, string billingFirstName, string billingLastName, string billingLine1, string billingLine2, string billingCity, string billingStateProvinceCode, string billingStateProvinceName, string billingZipPostalCode, string billingCountryRegionCode, string billingCountryRegionName, string billingTelephone, string shippingMethodId, string expirationMonth, string expirationYear, string customerName, string creditCardNumber, string validationCode, string creditCardBillingAddressId, string paymentMethodId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", propertiesToSetbasketType, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Status", status, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ShippingAddressId", shippingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingAddressName", shippingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingFirstName", shippingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLastName", shippingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine1", shippingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine2", shippingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCity", shippingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceCode", shippingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceName", shippingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingZipPostalCode", shippingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionCode", shippingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionName", shippingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingTelephone", shippingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressId", billingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressName", billingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingFirstName", billingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLastName", billingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine1", billingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine2", billingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCity", billingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceCode", billingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceName", billingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingZipPostalCode", billingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionCode", billingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionName", billingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingTelephone", billingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingMethodId", shippingMethodId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationMonth", expirationMonth, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationYear", expirationYear, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CustomerName", customerName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardNumber", creditCardNumber, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ValidationCode", validationCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardBillingAddressId", creditCardBillingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("PaymentMethodId", paymentMethodId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("UpdateBasketWithPaymentAndShippingMethods", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Updates a basket and returns the payment methods and shipping methods.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="propertiesToSetbasketType">The propertiestoset argument for BasketType</param>
		/// <param name="status">The propertiestoset argument for Status</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="shippingAddressId">The propertiestoset argument for ShippingAddressId</param>
		/// <param name="shippingAddressName">The propertiestoset argument for ShippingAddressName</param>
		/// <param name="shippingFirstName">The propertiestoset argument for ShippingFirstName</param>
		/// <param name="shippingLastName">The propertiestoset argument for ShippingLastName</param>
		/// <param name="shippingLine1">The propertiestoset argument for ShippingLine1</param>
		/// <param name="shippingLine2">The propertiestoset argument for ShippingLine2</param>
		/// <param name="shippingCity">The propertiestoset argument for ShippingCity</param>
		/// <param name="shippingStateProvinceCode">The propertiestoset argument for ShippingStateProvinceCode</param>
		/// <param name="shippingStateProvinceName">The propertiestoset argument for ShippingStateProvinceName</param>
		/// <param name="shippingZipPostalCode">The propertiestoset argument for ShippingZipPostalCode</param>
		/// <param name="shippingCountryRegionCode">The propertiestoset argument for ShippingCountryRegionCode</param>
		/// <param name="shippingCountryRegionName">The propertiestoset argument for ShippingCountryRegionName</param>
		/// <param name="shippingTelephone">The propertiestoset argument for ShippingTelephone</param>
		/// <param name="billingAddressId">The propertiestoset argument for BillingAddressId</param>
		/// <param name="billingAddressName">The propertiestoset argument for BillingAddressName</param>
		/// <param name="billingFirstName">The propertiestoset argument for BillingFirstName</param>
		/// <param name="billingLastName">The propertiestoset argument for BillingLastName</param>
		/// <param name="billingLine1">The propertiestoset argument for BillingLine1</param>
		/// <param name="billingLine2">The propertiestoset argument for BillingLine2</param>
		/// <param name="billingCity">The propertiestoset argument for BillingCity</param>
		/// <param name="billingStateProvinceCode">The propertiestoset argument for BillingStateProvinceCode</param>
		/// <param name="billingStateProvinceName">The propertiestoset argument for BillingStateProvinceName</param>
		/// <param name="billingZipPostalCode">The propertiestoset argument for BillingZipPostalCode</param>
		/// <param name="billingCountryRegionCode">The propertiestoset argument for BillingCountryRegionCode</param>
		/// <param name="billingCountryRegionName">The propertiestoset argument for BillingCountryRegionName</param>
		/// <param name="billingTelephone">The propertiestoset argument for BillingTelephone</param>
		/// <param name="shippingMethodId">The propertiestoset argument for ShippingMethodId</param>
		/// <param name="expirationMonth">The propertiestoset argument for ExpirationMonth</param>
		/// <param name="expirationYear">The propertiestoset argument for ExpirationYear</param>
		/// <param name="customerName">The propertiestoset argument for CustomerName</param>
		/// <param name="creditCardNumber">The propertiestoset argument for CreditCardNumber</param>
		/// <param name="validationCode">The propertiestoset argument for ValidationCode</param>
		/// <param name="creditCardBillingAddressId">The propertiestoset argument for CreditCardBillingAddressId</param>
		/// <param name="paymentMethodId">The search argument for PaymentMethodId</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> UpdateBasketWithPaymentAndShippingMethodsQueued(string name, string userId, string basketType, string propertiesToSetbasketType, string status, string refreshBasket, string shippingAddressId, string shippingAddressName, string shippingFirstName, string shippingLastName, string shippingLine1, string shippingLine2, string shippingCity, string shippingStateProvinceCode, string shippingStateProvinceName, string shippingZipPostalCode, string shippingCountryRegionCode, string shippingCountryRegionName, string shippingTelephone, string billingAddressId, string billingAddressName, string billingFirstName, string billingLastName, string billingLine1, string billingLine2, string billingCity, string billingStateProvinceCode, string billingStateProvinceName, string billingZipPostalCode, string billingCountryRegionCode, string billingCountryRegionName, string billingTelephone, string shippingMethodId, string expirationMonth, string expirationYear, string customerName, string creditCardNumber, string validationCode, string creditCardBillingAddressId, string paymentMethodId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", propertiesToSetbasketType, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Status", status, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ShippingAddressId", shippingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingAddressName", shippingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingFirstName", shippingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLastName", shippingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine1", shippingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingLine2", shippingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCity", shippingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceCode", shippingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingStateProvinceName", shippingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingZipPostalCode", shippingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionCode", shippingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingCountryRegionName", shippingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingTelephone", shippingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressId", billingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingAddressName", billingAddressName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingFirstName", billingFirstName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLastName", billingLastName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine1", billingLine1, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingLine2", billingLine2, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCity", billingCity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceCode", billingStateProvinceCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingStateProvinceName", billingStateProvinceName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingZipPostalCode", billingZipPostalCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionCode", billingCountryRegionCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingCountryRegionName", billingCountryRegionName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("BillingTelephone", billingTelephone, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ShippingMethodId", shippingMethodId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationMonth", expirationMonth, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ExpirationYear", expirationYear, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CustomerName", customerName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardNumber", creditCardNumber, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ValidationCode", validationCode, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("CreditCardBillingAddressId", creditCardBillingAddressId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("PaymentMethodId", paymentMethodId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("UpdateBasketWithPaymentAndShippingMethods", parameters, "POCO");
	return controller;

}












/// <summary>
/// Create Basket Line Item
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> CreateLineItem(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("CreateLineItem", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Create Basket Line Item
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> CreateLineItemQueued(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("CreateLineItem", parameters, "POCO");
	return controller;

}












/// <summary>
/// Create Basket Line Item with Paged Line Items.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>
		/// <param name="firstItemIndex">The search argument for FirstItemIndex</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> CreateLineItemWithPagedLineItems(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity, string firstItemIndex, string numberOfItemsToReturn, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("FirstItemIndex", firstItemIndex, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("CreateLineItemWithPagedLineItems", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Create Basket Line Item with Paged Line Items.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>
		/// <param name="firstItemIndex">The search argument for FirstItemIndex</param>
		/// <param name="numberOfItemsToReturn">The search argument for NumberOfItemsToReturn</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> CreateLineItemWithPagedLineItemsQueued(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity, string firstItemIndex, string numberOfItemsToReturn, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("FirstItemIndex", firstItemIndex, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("NumberOfItemsToReturn", numberOfItemsToReturn, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("CreateLineItemWithPagedLineItems", parameters, "POCO");
	return controller;

}












/// <summary>
/// Create Basket Line Item but do not return line items.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> CreateLineItemButDoNotReturnLineItems(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("CreateLineItemButDoNotReturnLineItems", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Create Basket Line Item but do not return line items.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="variantId">The propertiestoset argument for VariantId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> CreateLineItemButDoNotReturnLineItemsQueued(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string variantId, string quantity)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("VariantId", variantId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("CreateLineItemButDoNotReturnLineItems", parameters, "POCO");
	return controller;

}












/// <summary>
/// Delete Basket Line Item
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="lineItemId">The search argument for LineItemId</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> DeleteLineItem(string name, string userId, string basketType, string refreshBasket, string lineItemId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("LineItemId", lineItemId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("DeleteLineItem", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Delete Basket Line Item
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="lineItemId">The search argument for LineItemId</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> DeleteLineItemQueued(string name, string userId, string basketType, string refreshBasket, string lineItemId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("LineItemId", lineItemId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("DeleteLineItem", parameters, "POCO");
	return controller;

}












/// <summary>
/// Update Basket Line Item
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="lineItemId">The search argument for LineItemId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> UpdateLineItem(string name, string userId, string basketType, string refreshBasket, string lineItemId, string quantity)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("LineItemId", lineItemId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("UpdateLineItem", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Update Basket Line Item
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="lineItemId">The search argument for LineItemId</param>
		/// <param name="quantity">The propertiestoset argument for Quantity</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> UpdateLineItemQueued(string name, string userId, string basketType, string refreshBasket, string lineItemId, string quantity)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("LineItemId", lineItemId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("Quantity", quantity, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("UpdateLineItem", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get's an order than has been placed.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="orderNumber">The search argument for OrderNumber</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetOrder(string name, string userId, string basketType, string orderNumber)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("OrderNumber", orderNumber, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("GetOrder", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get's an order than has been placed.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="orderNumber">The search argument for OrderNumber</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetOrderQueued(string name, string userId, string basketType, string orderNumber)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("OrderNumber", orderNumber, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("GetOrder", parameters, "POCO");
	return controller;

}












/// <summary>
/// Adds a product to list.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="parLevel">The propertiestoset argument for ParLevel</param>
		/// <param name="label">The propertiestoset argument for Label</param>
		/// <param name="linePosition">The propertiestoset argument for LinePosition</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> AddToList(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string parLevel, string label, string linePosition)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ParLevel", parLevel, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Label", label, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("LinePosition", linePosition, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("AddToList", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Adds a product to list.
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="catalogName">The propertiestoset argument for CatalogName</param>
		/// <param name="productId">The propertiestoset argument for ProductId</param>
		/// <param name="parLevel">The propertiestoset argument for ParLevel</param>
		/// <param name="label">The propertiestoset argument for Label</param>
		/// <param name="linePosition">The propertiestoset argument for LinePosition</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> AddToListQueued(string name, string userId, string basketType, string refreshBasket, string catalogName, string productId, string parLevel, string label, string linePosition)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("CatalogName", catalogName, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ProductId", productId, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("ParLevel", parLevel, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("Label", label, RequestTemplateParameterType.PropertiesToSet));

	parameters.Add(new RequestTemplateParameter("LinePosition", linePosition, RequestTemplateParameterType.PropertiesToSet));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("AddToList", parameters, "POCO");
	return controller;

}












/// <summary>
/// Delete Item From List
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="lineItemId">The search argument for LineItemId</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> DeleteItemFromList(string name, string userId, string basketType, string refreshBasket, string lineItemId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("LineItemId", lineItemId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("DeleteItemFromList", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Delete Item From List
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="lineItemId">The search argument for LineItemId</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> DeleteItemFromListQueued(string name, string userId, string basketType, string refreshBasket, string lineItemId)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("LineItemId", lineItemId, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("DeleteItemFromList", parameters, "POCO");
	return controller;

}












/// <summary>
/// Get User Notes
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>A CommerceEntity from the response when there is one, null otherwise.</returns>
public static List<CommerceEntity> GetNotes(string name, string userId, string basketType, string refreshBasket, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	var serviceAdapterResponse = controller.ProcessRequest("GetNotes", parameters, "POCO");

	if (serviceAdapterResponse.Succeeded)
	{
		var response = serviceAdapterResponse.Value as List<CommerceEntity>;
		if(response !=null && response.Count >0)
		{
			return response;
		}
		//	It's possible that request template doesn't return anything so it's not an error if it returns nothing
	}
	else
	{
		// It is an issue if Succeeded == false
		throw new RequestTemplateException() { Errors = serviceAdapterResponse.Errors };
	}

	return null;

}

/// <summary>
/// Get User Notes
/// </summary>

/// <param name="name">The search argument for Name</param>
		/// <param name="userId">The search argument for UserId</param>
		/// <param name="basketType">The search argument for BasketType</param>
		/// <param name="refreshBasket">The option argument for RefreshBasket</param>
		/// <param name="returnTotalItemCount">The search argument for ReturnTotalItemCount</param>

/// <returns>Commerce Server Contrib controller which can be used to get the response.</returns>
public static BaseController<IRequestTemplateController> GetNotesQueued(string name, string userId, string basketType, string refreshBasket, string returnTotalItemCount)
{

	var parameters = new RequestTemplateParameterCollection();


	parameters.Add(new RequestTemplateParameter("Name", name, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("UserId", userId, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("BasketType", basketType, RequestTemplateParameterType.Search));

	parameters.Add(new RequestTemplateParameter("RefreshBasket", refreshBasket, RequestTemplateParameterType.Option));

	parameters.Add(new RequestTemplateParameter("ReturnTotalItemCount", returnTotalItemCount, RequestTemplateParameterType.Search));

	var controller = ControllerFactory.GetController("Orders");
	controller.QueueRequest("GetNotes", parameters, "POCO");
	return controller;

}

	}


}
