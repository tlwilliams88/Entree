//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KeithLink.Svc.WebApi.com.benekeith.MessagingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="com.benekeith.MessagingService.IMessagingService")]
    public interface IMessagingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/AddUserSubscription", ReplyAction="http://tempuri.org/IMessagingService/AddUserSubscriptionResponse")]
        bool AddUserSubscription(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/AddUserSubscription", ReplyAction="http://tempuri.org/IMessagingService/AddUserSubscriptionResponse")]
        System.Threading.Tasks.Task<bool> AddUserSubscriptionAsync(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/RemoveUserSubscription", ReplyAction="http://tempuri.org/IMessagingService/RemoveUserSubscriptionResponse")]
        bool RemoveUserSubscription(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/RemoveUserSubscription", ReplyAction="http://tempuri.org/IMessagingService/RemoveUserSubscriptionResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserSubscriptionAsync(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/GetUserMessages", ReplyAction="http://tempuri.org/IMessagingService/GetUserMessagesResponse")]
        KeithLink.Svc.Core.Models.Messaging.EF.UserMessage[] GetUserMessages(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/GetUserMessages", ReplyAction="http://tempuri.org/IMessagingService/GetUserMessagesResponse")]
        System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Messaging.EF.UserMessage[]> GetUserMessagesAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/CreateUserMessage", ReplyAction="http://tempuri.org/IMessagingService/CreateUserMessageResponse")]
        long CreateUserMessage(System.Guid userId, KeithLink.Svc.Core.Models.SiteCatalog.UserSelectedContext catalogInfo, KeithLink.Svc.Core.Models.Messaging.UserMessageModel userMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/CreateUserMessage", ReplyAction="http://tempuri.org/IMessagingService/CreateUserMessageResponse")]
        System.Threading.Tasks.Task<long> CreateUserMessageAsync(System.Guid userId, KeithLink.Svc.Core.Models.SiteCatalog.UserSelectedContext catalogInfo, KeithLink.Svc.Core.Models.Messaging.UserMessageModel userMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/ReadUserMessages", ReplyAction="http://tempuri.org/IMessagingService/ReadUserMessagesResponse")]
        KeithLink.Svc.Core.Models.Messaging.UserMessageModel[] ReadUserMessages(KeithLink.Svc.Core.Models.Profile.UserProfile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/ReadUserMessages", ReplyAction="http://tempuri.org/IMessagingService/ReadUserMessagesResponse")]
        System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Messaging.UserMessageModel[]> ReadUserMessagesAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/MarkAsReadUserMessages", ReplyAction="http://tempuri.org/IMessagingService/MarkAsReadUserMessagesResponse")]
        void MarkAsReadUserMessages(KeithLink.Svc.Core.Models.Messaging.UserMessageModel[] userMessages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/MarkAsReadUserMessages", ReplyAction="http://tempuri.org/IMessagingService/MarkAsReadUserMessagesResponse")]
        System.Threading.Tasks.Task MarkAsReadUserMessagesAsync(KeithLink.Svc.Core.Models.Messaging.UserMessageModel[] userMessages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/TestNotification", ReplyAction="http://tempuri.org/IMessagingService/TestNotificationResponse")]
        void TestNotification();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/TestNotification", ReplyAction="http://tempuri.org/IMessagingService/TestNotificationResponse")]
        System.Threading.Tasks.Task TestNotificationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/GetUnreadMessagesCount", ReplyAction="http://tempuri.org/IMessagingService/GetUnreadMessagesCountResponse")]
        int GetUnreadMessagesCount(KeithLink.Svc.Core.Models.Profile.UserProfile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/GetUnreadMessagesCount", ReplyAction="http://tempuri.org/IMessagingService/GetUnreadMessagesCountResponse")]
        System.Threading.Tasks.Task<int> GetUnreadMessagesCountAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/UpdateMessagingPreferences", ReplyAction="http://tempuri.org/IMessagingService/UpdateMessagingPreferencesResponse")]
        void UpdateMessagingPreferences(KeithLink.Svc.Core.Models.Messaging.ProfileMessagingPreferenceModel messagingPreferenceModel, KeithLink.Svc.Core.Models.Profile.UserProfile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/UpdateMessagingPreferences", ReplyAction="http://tempuri.org/IMessagingService/UpdateMessagingPreferencesResponse")]
        System.Threading.Tasks.Task UpdateMessagingPreferencesAsync(KeithLink.Svc.Core.Models.Messaging.ProfileMessagingPreferenceModel messagingPreferenceModel, KeithLink.Svc.Core.Models.Profile.UserProfile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/ReadMessagingPreferences", ReplyAction="http://tempuri.org/IMessagingService/ReadMessagingPreferencesResponse")]
        KeithLink.Svc.Core.Models.Messaging.UserMessagingPreferenceModel[] ReadMessagingPreferences(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/ReadMessagingPreferences", ReplyAction="http://tempuri.org/IMessagingService/ReadMessagingPreferencesResponse")]
        System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Messaging.UserMessagingPreferenceModel[]> ReadMessagingPreferencesAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/ReadPagedUserMessages", ReplyAction="http://tempuri.org/IMessagingService/ReadPagedUserMessagesResponse")]
        KeithLink.Svc.Core.Models.Paging.PagedResults<KeithLink.Svc.Core.Models.Messaging.UserMessageModel> ReadPagedUserMessages(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Paging.PagingModel paging);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/ReadPagedUserMessages", ReplyAction="http://tempuri.org/IMessagingService/ReadPagedUserMessagesResponse")]
        System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Paging.PagedResults<KeithLink.Svc.Core.Models.Messaging.UserMessageModel>> ReadPagedUserMessagesAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Paging.PagingModel paging);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/RegisterPushDevice", ReplyAction="http://tempuri.org/IMessagingService/RegisterPushDeviceResponse")]
        bool RegisterPushDevice(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Messaging.PushDeviceRegistrationModel deviceRegistrationModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagingService/RegisterPushDevice", ReplyAction="http://tempuri.org/IMessagingService/RegisterPushDeviceResponse")]
        System.Threading.Tasks.Task<bool> RegisterPushDeviceAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Messaging.PushDeviceRegistrationModel deviceRegistrationModel);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessagingServiceChannel : KeithLink.Svc.WebApi.com.benekeith.MessagingService.IMessagingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessagingServiceClient : System.ServiceModel.ClientBase<KeithLink.Svc.WebApi.com.benekeith.MessagingService.IMessagingService>, KeithLink.Svc.WebApi.com.benekeith.MessagingService.IMessagingService {
        
        public MessagingServiceClient() {
        }
        
        public MessagingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessagingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessagingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessagingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddUserSubscription(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint) {
            return base.Channel.AddUserSubscription(notificationType, channel, userId, customerNumber, notificationEndpoint);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserSubscriptionAsync(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint) {
            return base.Channel.AddUserSubscriptionAsync(notificationType, channel, userId, customerNumber, notificationEndpoint);
        }
        
        public bool RemoveUserSubscription(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint) {
            return base.Channel.RemoveUserSubscription(notificationType, channel, userId, customerNumber, notificationEndpoint);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserSubscriptionAsync(KeithLink.Svc.Core.Enumerations.Messaging.NotificationType notificationType, KeithLink.Svc.Core.Enumerations.Messaging.Channel channel, System.Guid userId, string customerNumber, string notificationEndpoint) {
            return base.Channel.RemoveUserSubscriptionAsync(notificationType, channel, userId, customerNumber, notificationEndpoint);
        }
        
        public KeithLink.Svc.Core.Models.Messaging.EF.UserMessage[] GetUserMessages(System.Guid userId) {
            return base.Channel.GetUserMessages(userId);
        }
        
        public System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Messaging.EF.UserMessage[]> GetUserMessagesAsync(System.Guid userId) {
            return base.Channel.GetUserMessagesAsync(userId);
        }
        
        public long CreateUserMessage(System.Guid userId, KeithLink.Svc.Core.Models.SiteCatalog.UserSelectedContext catalogInfo, KeithLink.Svc.Core.Models.Messaging.UserMessageModel userMessage) {
            return base.Channel.CreateUserMessage(userId, catalogInfo, userMessage);
        }
        
        public System.Threading.Tasks.Task<long> CreateUserMessageAsync(System.Guid userId, KeithLink.Svc.Core.Models.SiteCatalog.UserSelectedContext catalogInfo, KeithLink.Svc.Core.Models.Messaging.UserMessageModel userMessage) {
            return base.Channel.CreateUserMessageAsync(userId, catalogInfo, userMessage);
        }
        
        public KeithLink.Svc.Core.Models.Messaging.UserMessageModel[] ReadUserMessages(KeithLink.Svc.Core.Models.Profile.UserProfile user) {
            return base.Channel.ReadUserMessages(user);
        }
        
        public System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Messaging.UserMessageModel[]> ReadUserMessagesAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user) {
            return base.Channel.ReadUserMessagesAsync(user);
        }
        
        public void MarkAsReadUserMessages(KeithLink.Svc.Core.Models.Messaging.UserMessageModel[] userMessages) {
            base.Channel.MarkAsReadUserMessages(userMessages);
        }
        
        public System.Threading.Tasks.Task MarkAsReadUserMessagesAsync(KeithLink.Svc.Core.Models.Messaging.UserMessageModel[] userMessages) {
            return base.Channel.MarkAsReadUserMessagesAsync(userMessages);
        }
        
        public void TestNotification() {
            base.Channel.TestNotification();
        }
        
        public System.Threading.Tasks.Task TestNotificationAsync() {
            return base.Channel.TestNotificationAsync();
        }
        
        public int GetUnreadMessagesCount(KeithLink.Svc.Core.Models.Profile.UserProfile user) {
            return base.Channel.GetUnreadMessagesCount(user);
        }
        
        public System.Threading.Tasks.Task<int> GetUnreadMessagesCountAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user) {
            return base.Channel.GetUnreadMessagesCountAsync(user);
        }
        
        public void UpdateMessagingPreferences(KeithLink.Svc.Core.Models.Messaging.ProfileMessagingPreferenceModel messagingPreferenceModel, KeithLink.Svc.Core.Models.Profile.UserProfile user) {
            base.Channel.UpdateMessagingPreferences(messagingPreferenceModel, user);
        }
        
        public System.Threading.Tasks.Task UpdateMessagingPreferencesAsync(KeithLink.Svc.Core.Models.Messaging.ProfileMessagingPreferenceModel messagingPreferenceModel, KeithLink.Svc.Core.Models.Profile.UserProfile user) {
            return base.Channel.UpdateMessagingPreferencesAsync(messagingPreferenceModel, user);
        }
        
        public KeithLink.Svc.Core.Models.Messaging.UserMessagingPreferenceModel[] ReadMessagingPreferences(System.Guid userId) {
            return base.Channel.ReadMessagingPreferences(userId);
        }
        
        public System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Messaging.UserMessagingPreferenceModel[]> ReadMessagingPreferencesAsync(System.Guid userId) {
            return base.Channel.ReadMessagingPreferencesAsync(userId);
        }
        
        public KeithLink.Svc.Core.Models.Paging.PagedResults<KeithLink.Svc.Core.Models.Messaging.UserMessageModel> ReadPagedUserMessages(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Paging.PagingModel paging) {
            return base.Channel.ReadPagedUserMessages(user, paging);
        }
        
        public System.Threading.Tasks.Task<KeithLink.Svc.Core.Models.Paging.PagedResults<KeithLink.Svc.Core.Models.Messaging.UserMessageModel>> ReadPagedUserMessagesAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Paging.PagingModel paging) {
            return base.Channel.ReadPagedUserMessagesAsync(user, paging);
        }
        
        public bool RegisterPushDevice(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Messaging.PushDeviceRegistrationModel deviceRegistrationModel) {
            return base.Channel.RegisterPushDevice(user, deviceRegistrationModel);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPushDeviceAsync(KeithLink.Svc.Core.Models.Profile.UserProfile user, KeithLink.Svc.Core.Models.Messaging.PushDeviceRegistrationModel deviceRegistrationModel) {
            return base.Channel.RegisterPushDeviceAsync(user, deviceRegistrationModel);
        }
    }
}
